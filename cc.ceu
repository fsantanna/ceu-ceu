val OPERATORS = iterable-to-dict ([
    '+', '-', '*', '/', '>', '<', '=', '!', '|', '&', '~', '%', '#', '@'
])

data :Tk = [pos,str] {
    :Id  = []
    :Tag = []
    :Num = []
    :Sym = []
    :Op  = []
    :Key = [] {
        :and   = []
        :await = []
        :val   = []
    }
}

data :Ex = [tk] {
    :TODO = []
    :Dcl  = [id,src]
    :Tag  = [tag]
    :Acc  = [id]
    :Num  = [num]
    :Call = [proto, args]
}

val f-name = ...[1]
val f-hand = `:pointer fopen($f-name.Dyn->Ncast.Vector.buf, "r")`
defer {
    `fclose($f-hand.Pointer);`
}

func string-rep (str, n) {
    if n == 0 -> str -> (str ++ string-rep(str, n-1))
}

func for-each (col, f) {
    loop in iter(col), v {
        f(v)
    }
}

func map (xs, f) {
    val ret = #[]
    loop in iter(xs), x {
        set ret[+] = f(x)
    }
    move(ret)
}

^["char.ceu"]
^["file.ceu"]   ;;(f-hand)
^["lexer.ceu"]
^["tokens.ceu"]
^["parser.ceu"]
^["coder.ceu"]

val e = parser()
val s = coder(e)

func ast-dump (e, spc) {
    print(string-rep(" ", spc))
    ifs e {
        (e is? :Pos) or (e is? :Tk) -> println(e)
        (e is? :vector) and (e[0] is? :char) -> println(e)
        (e is? :tuple) or (e is? :vector) {
            if e is? :vector {
                print('#')
            }
            print('[')
            println(tags(e) thus { if #it>0 -> it[0] -> "." })
            loop in iter(e), v {
                ast-dump(v, spc+4)
            }
            print(string-rep(" ", spc))
            println(']')
        }
        else {
            println(e)
        }
    }
}

println(e)
ast-dump(e,0)
