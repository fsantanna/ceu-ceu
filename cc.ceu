println(...)

pass :Tk

val f-name = ...[1]
val f = `:pointer fopen($f-name.Dyn->Ncast.Vector.buf, "r")`
defer {
    `fclose($f.Pointer);`
}

val tks =
func tks-read () {
}

do :unnest {
    var buf = nil

    func f-read () {
        if buf {
            val c = buf
            set buf = nil
            c
        } else {
            val b = `:number fgetc($f.Pointer)`
            if b == `:number EOF` {
                nil
            } else {
                `:char $b.Number`
            }
        }
    }

    func f-unread (c) {
        assert(not buf)
        set buf = c
    }

    func f-read-until (c) {
        loop in iter(f-read), x until x==c {
        }
    }
}

val co-skip = spawn coro {
    yield()
    loop in iter(f-read), c {
        ifs c {
            in? [' ','\t','\n'] -> {}
            == ';' -> {
                val c2 = f-read()
                if c2 /= ';' {
                    f-unread(c2)
                    yield(';')
                } else {
                    f-read-until('\n')
                }
            }
            else -> yield(c)
        }
    }
}

val co-token = spawn coro {
    yield()
    loop in iter(co-skip), c {
        ifs c {
            in? ['}','(',')','[',']',',','$'] -> yield(:Tk.Fix [c, []])
            else -> yield(c)
        }
    }
}

loop in iter(co-token), tk {
    println(tk)
}

;;;
func {>>|>>} (x1, x2) {
    resume
}

val x = (coroutine(co-char) >>|>> coroutine(co-skip)) >>|>> coroutine(co-token)

        val c = `:char $n.Number`
        println(n, c)
println(f-name, f)
;;;
